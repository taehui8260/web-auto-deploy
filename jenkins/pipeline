node {

    def MAVEN_HOME
    def JAVA_HOME
    def CURRENT_DATE

    stage('Preparation') {
        MAVEN_HOME = tool 'MAVEN_3.9.4'
        JAVA_HOME = tool name: 'OpenJDK11', type: 'hudson.model.JDK'
        env.JAVA_HOME = "${JAVA_HOME}"
        env.PATH = "${env.PATH}:${env.JAVA_HOME}/bin"
        CURRENT_DATE = sh(returnStdout: true, script: 'date +%Y%m%d%H%M').trim()
        GIT_HOST = "https://github.com/taehui8260/web-auto-deploy.git"
    }

    stage('Checkout') {
        git branch: 'main', credentialsId: 'GITHUB_ACCESS_TOKEN', url: "${GIT_HOST}"
    }

    stage('Build') {
        sh "${MAVEN_HOME}/bin/mvn -f pom.xml clean package pmd:pmd pmd:cpd"
    }

    def pom = readMavenPom file: 'pom.xml'
    def ARTIFACT_ID = pom.artifactId
    def VERSION = pom.version
    def BUILD_FILE_NAME = "${ARTIFACT_ID}-${VERSION}.jar"

    stage('Deploy') {
        sh """
        if [ -d /appdata/jenkins/web-auto-deploy/deploy/ ]; then
          rm -rf /appdata/jenkins/web-auto-deploy/deploy/
        fi
        """
        sh "mkdir -m 777 -p /appdata/jenkins/web-auto-deploy/deploy/"
        sh "mkdir -m 777 -p /appdata/jenkins/web-auto-deploy/deploy/back-end-was"

        sh "cp ./target/${BUILD_FILE_NAME} /appdata/jenkins/web-auto-deploy/deploy/back-end-was"
        sh "cp -r ./front-end /appdata/jenkins/web-auto-deploy/deploy/front-end-was"
        sh "cp -r ./docker/nginx-lb /appdata/jenkins/web-auto-deploy/deploy"

        sh "cp ./docker/back-end-was/Dockerfile /appdata/jenkins/web-auto-deploy/deploy/back-end-was"
        sh "cp ./docker/front-end-was/Dockerfile /appdata/jenkins/web-auto-deploy/deploy/front-end-was"
    }

    def API_CONTAINER_NAME = 'back-end-was'
    def APP_CONTAINER_NAME = 'front-end-was'
    def WEB_CONTAINER_NAME = 'nginx-lb'

    stage('Docker Build/Push/Run') {
        withCredentials([string(credentialsId: 'WSL_SECRET', variable: 'WSL_SECRET')]) {
            def remote = [:]
            remote.name = 'wsl_host'
            remote.host = '192.168.50.2'
            remote.port = 22
            remote.user = 'lth1178'
            remote.password = WSL_SECRET // Groovy 변수로 사용
            remote.allowAnyHosts = true
            sshCommand remote: remote, command: """
            cd /appdata/jenkins/web-auto-deploy/deploy/back-end
            docker build -t ${API_CONTAINER_NAME} .
            cd /appdata/jenkins/web-auto-deploy/deploy/front-end
            docker build -t ${APP_CONTAINER_NAME} .
            cd /appdata/jenkins/web-auto-deploy/deploy/nginx-lb
            docker build -t ${WEB_CONTAINER_NAME} .

            docker run --rm -d -p 8080:8080 -e TZ=Asia/Seoul --name ${API_CONTAINER_NAME} ${API_CONTAINER_NAME}
            docker run --rm -d -p 4000:4000 -e TZ=Asia/Seoul --name ${APP_CONTAINER_NAME} ${APP_CONTAINER_NAME}
            docker run --rm -d -p 80:80 -p 18443:443 -v /applog/jenkins/web-auto-deploy/web:/var/log/nginx -e TZ=Asia/Seoul --name ${WEB_CONTAINER_NAME} ${WEB_CONTAINER_NAME}
            """, failOnError: true
        }
    }

    stage('Docker Push') {
            withCredentials([string(credentialsId: 'WSL_SECRET', variable: 'WSL_SECRET'), string(credentialsId: 'DOCKERUSER_SECRET', variable: 'DOCKERUSER_SECRET'), string(credentialsId: 'DOCKER_REGISTRY', variable: 'DOCKER_REGISTRY')]) {
                def remote = [:]
                remote.name = 'wsl_host'
                remote.host = '192.168.50.2'
                remote.port = 22
                remote.user = 'lth1178'
                remote.password = WSL_SECRET // Groovy 변수로 사용
                remote.allowAnyHosts = true
                sshCommand remote: remote, command: """

                docker login -u taehui8260 -p ${DOCKERUSER_SECRET}
                docker tag ${API_CONTAINER_NAME} {DOCKER_REGISTRY}/${API_CONTAINER_NAME}:${CURRENT_DATE}
                docker tag ${APP_CONTAINER_NAME} {DOCKER_REGISTRY}/{APP_CONTAINER_NAME}:${CURRENT_DATE}
                docker tag ${WEB_CONTAINER_NAME} {DOCKER_REGISTRY}/${WEB_CONTAINER_NAME}:${CURRENT_DATE}

                docker push {DOCKER_REGISTRY}/${API_CONTAINER_NAME}:${CURRENT_DATE}
                docker push {DOCKER_REGISTRY}/{APP_CONTAINER_NAME}:${CURRENT_DATE}
                docker push {DOCKER_REGISTRY}/${WEB_CONTAINER_NAME}:${CURRENT_DATE}

                docker rmi ${DOCKER_REGISTRY}/${API_CONTAINER_NAME}:${CURRENT_DATE}
                docker rmi ${DOCKER_REGISTRY}/${APP_CONTAINER_NAME}:${CURRENT_DATE}
                docker rmi ${DOCKER_REGISTRY}/${WEB_CONTAINER_NAME}:${CURRENT_DATE}

                """, failOnError: true
            }
        }
}